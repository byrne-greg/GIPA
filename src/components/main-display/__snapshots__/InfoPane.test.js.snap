// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InfoPane component full render matches expected snapshot when not showing infopane 1`] = `
<div
  className="InfoPane"
>
  <button
    className="InfoPane__overlayOpenButton"
    onClick={[Function]}
  >
    <i
      className="fas fa-info-circle"
    />
  </button>
  <div
    className="InfoPane__overlay"
    style={
      Object {
        "display": "none",
      }
    }
  >
    <div
      className="Card__content"
    >
      <h2
        className="Card__title"
      >
        Greg's Interactive Personal Advocate
      </h2>
      <div
        className="Card__body"
      >
        <p>
          GIPA was created as a personal project. The idea was to devise a way in which inquiring users could ask any questions they want to find out more about me. It's real mission was a self-learning practical exercise in using a wide variety of unfamiliar technologies and experimenting with my favourite topic at present time of writing - Chatbots! Read about it's
           
          <a
            href="https://medium.com/@byrne.greg/a-development-story-in-creating-a-digital-advocate-with-watson-assistant-1623b824ec34"
            rel="noopener noreferrer"
            target="_blank"
          >
            development story
          </a>
           
          or visit the
           
          <a
            href="https://github.com/byrne-greg/GIPA"
            rel="noopener noreferrer"
            target="_blank"
          >
            code repository
          </a>
          .
        </p>
        <p>
          GIPA uses a bunch of technologies. The front-end was developed with
           
          <a
            href="https://reactjs.org/"
            rel="noopener noreferrer"
            target="_blank"
          >
            ReactJS
          </a>
           
          (and typical CSS/HTML). The conversational agent was created using the
           
          <a
            href="https://www.ibm.com/watson/ai-assistant/"
            rel="noopener noreferrer"
            target="_blank"
          >
            IBM's Watson Assistant
          </a>
           
          platform. The connectivity between the front-end and Watson Assistant uses the
           
          <a
            href="https://samnewman.io/patterns/architectural/bff/"
            rel="noopener noreferrer"
            target="_blank"
          >
            Backend for Frontend
          </a>
           
          pattern. It is deployed using a
           
          <a
            href="https://nodejs.org/en/"
            rel="noopener noreferrer"
            target="_blank"
          >
            NodeJS
          </a>
           
          FaaS with
           
          <a
            href="https://openwhisk.apache.org/"
            rel="noopener noreferrer"
            target="_blank"
          >
            Apache OpenWhisk
          </a>
          . The Backend for Frontend FaaS and the static front-end content is all hosted on
           
          <a
            href="https://www.ibm.com/cloud/"
            rel="noopener noreferrer"
            target="_blank"
          >
            IBM Cloud
          </a>
           
          (formerly Bluemix) and Surge. The VCS uses
           
          <a
            href="https://github.com/"
            rel="noopener noreferrer"
            target="_blank"
          >
            GitHub
          </a>
           
          and the build toolchain uses
           
          <a
            href="https://travis-ci.org/"
            rel="noopener noreferrer"
            target="_blank"
          >
            Travis CI
          </a>
           
          and
           
          <a
            href="https://coveralls.io/"
            rel="noopener noreferrer"
            target="_blank"
          >
            Coveralls
          </a>
          .
        </p>
        <p>
          For functionality, the responses are hard-coded within the Assistant workspace (due to the mostly static information about me). There is some dynamic content such as asking for a joke, which is a call-out to
           
          <a
            href="https://icanhazdadjoke.com/"
            rel="noopener noreferrer"
            target="_blank"
          >
            https://icanhazdadjoke.com/
          </a>
           
          to retrieve a random joke.
        </p>
        <p>
          Try ask GIPA questions in natural language about me.
        </p>
        <div />
      </div>
    </div>
    <div
      className="InfoPane__suggestedResponse"
      onClick={[Function]}
    />
    <div
      className="CloseButton"
      onClick={[Function]}
    >
      <i
        className="far fa-times-circle"
      />
    </div>
  </div>
</div>
`;
